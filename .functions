#!/bin/bash

# Functions

# Make directory and cd into it
m() {
  mkdir $1 && cd $_
}

# Create file and open it
to() {
  touch $1 && open $_
}

# Commit w/o doing pre-commit checks
lookMomNoHands() {
  git commit --no-verify -m "$1"
}

# Sometimes you need to commit nothing
emptycommit() {
  git commit --allow-empty -m "$1"
}

dockerRestart() {
  docker-compose down
  docker-compose up
}

# Get "into" a given container
dockerssh() {
  docker exec -it $1 bash
}

# Returns the process that's running on a port
onport() {
  lsof -i :$1
}

# Kills whatever is running on a specified port
killport() {
  kill -9 "$(lsof -i :$1 -t)"
}

# Installs a new version of node, including installing all the old packages
installnode () {
  current="$(node -v)"
  nvm install $1 --reinstall-packages-from="${current}"
  nvm use $1
  nvm alias default $1
}

# More thorough npm install
npmin() {
  rm -rf node_modules/
  npm cache clean
  npm i
}

# Search for a git branch
fb() {
  git branch | grep $1
}
findBranch() {
  git branch | grep $1
}

# List the files that have been added or modified since your last commit
gFileDiff() {
  echo
  git diff --name-only `git rev-parse --abbrev-ref HEAD`
  echo
}

# Clone and npm install
gclone() {
  git clone $1 && npm install
}

# Push to the origin of the current branch
gpusho() {
  current="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
  git push origin $current
}

# Commit
gc() {
  g commit -m $1
}
gcommit() {
  g commit -m $1
}
# Jump over to develop, pull, then go back to the branch you were on and merge with local develop
mergeDev() {
	current="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
	git checkout develop && git pull origin develop && git checkout $current && git merge develop
}
merge_main() {
	current="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
	git checkout main && git pull origin main && git checkout $current && git merge main
}
# Jump over to master, pull, then go back to the branch you were on and merge with local master
merge_master() {
	current="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
	git checkout master && git pull origin master && git checkout $current && git merge master
}

# Kill all ongoing webpack processes
killwebpack() {
  ps aux|grep -i "node\s.*webpack" | awk '{print $2}' | xargs kill -9
}

# Other/Extras
whatsmyIP() {
  dig +short myip.opendns.com @resolver1.opendns.com
}

camerausedby() {
	echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
	usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
	echo -e "Recent camera uses:\n$usedby"
}

# Some configuration stuff for `npm init`
config_npm() {
  npm config set init.author.name "Dave Lunny"
  npm config set init.author.email "d@velunny.com"
  npm config set init.author.url "himynameisdave.com"
  npm config set init.license "MIT"
}

gpgSetLocalKey() {
  git config --local user.signingkey $1
  git config --local commit.gpgsign true
}

versionsof() {
  npm view $1 versions
}

# Open the Pull Request URL for your current directory's branch (base branch defaults to main)
openpr() {
  github_url=`git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@' -e 's%\.git$%%' | awk '/github/'`;
  branch_name=`git symbolic-ref HEAD | cut -d"/" -f 3,4`;
  default_branch=`git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'`;
  pr_url=$github_url"/compare/"$default_branch"..."$branch_name
  open $pr_url;
}
